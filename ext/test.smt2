(set-logic QF_AUFBV)
(declare-sort Register_s 0)
(declare-fun IdentityNoIdle.id.id_inputs_f (Register_s) (_ BitVec 32))
(declare-fun IdentityNoIdle.id.id_outputs.valid_f (Register_s) Bool)
(declare-fun IdentityNoIdle.id.id_outputs_f (Register_s) (_ BitVec 32))
(declare-fun Register._T_2_f (Register_s) (_ BitVec 32))
(declare-fun __counter_f (Register_s) (_ BitVec 1))
(declare-fun Register.clock_f (Register_s) Bool)
(declare-fun Register.io_in_f (Register_s) (_ BitVec 32))
(declare-fun Register.reset_f (Register_s) Bool)
(define-fun Register.io_out_f ((state Register_s)) (_ BitVec 32) (Register._T_2_f state))
(define-fun IdentityNoIdle.id.id_inputs_next ((state Register_s)) (_ BitVec 32) (IdentityNoIdle.id.id_inputs_f state))
(define-fun IdentityNoIdle.id.id_outputs.valid_next ((state Register_s)) Bool (IdentityNoIdle.id.id_outputs.valid_f state))
(define-fun IdentityNoIdle.id.id_outputs_next ((state Register_s)) (_ BitVec 32) (IdentityNoIdle.id.id_outputs_f state))
(define-fun Register._T_2_next ((state Register_s)) (_ BitVec 32) (ite (= (Register.io_in_f state) (_ bv0 32)) (_ bv1 32) (Register.io_in_f state)))
(define-fun __counter_next ((state Register_s)) (_ BitVec 1) (bvadd (__counter_f state) (_ bv1 1)))
(define-fun IdentityNoIdle.id.id_outputs.valid_init ((state Register_s)) Bool true)
(define-fun IdentityNoIdle.id.id_outputs_init ((state Register_s)) (_ BitVec 32) (IdentityNoIdle.id.id_inputs_f state))
(define-fun __counter_init ((state Register_s)) (_ BitVec 1) (_ bv0 1))
(define-fun Register_is ((state Register_s)) Bool (and (and (= (IdentityNoIdle.id.id_outputs.valid_f state) (IdentityNoIdle.id.id_outputs.valid_init state)) (= (IdentityNoIdle.id.id_outputs_f state) (IdentityNoIdle.id.id_outputs_init state))) (= (__counter_f state) (__counter_init state))))
(define-fun Register_t ((state Register_s) (next_state Register_s)) Bool (and (and (and (and (= (IdentityNoIdle.id.id_inputs_f next_state) (IdentityNoIdle.id.id_inputs_next state)) (= (IdentityNoIdle.id.id_outputs.valid_f next_state) (IdentityNoIdle.id.id_outputs.valid_next state))) (= (IdentityNoIdle.id.id_outputs_f next_state) (IdentityNoIdle.id.id_outputs_next state))) (= (Register._T_2_f next_state) (Register._T_2_next state))) (= (__counter_f next_state) (__counter_next state))))
(define-fun c3 ((state Register_s)) Bool (=> (= (__counter_f state) (_ bv1 1)) (= (Register.io_in_f state) (IdentityNoIdle.id.id_inputs_f state))))
(define-fun c1 ((state Register_s)) Bool (=> (= (__counter_f state) (_ bv0 1)) (= (Register.io_in_f state) (IdentityNoIdle.id.id_inputs_f state))))
(define-fun c2 ((state Register_s)) Bool true)
(define-fun c4 ((state Register_s)) Bool (not (Register.reset_f state)))
(define-fun c0 ((state Register_s)) Bool true)
(define-fun b0 ((state Register_s)) Bool false)
(define-fun b1 ((state Register_s)) Bool (not (=> (= (__counter_f state) (_ bv1 1)) (=> (IdentityNoIdle.id.id_outputs.valid_f state) (= (Register.io_out_f state) (IdentityNoIdle.id.id_outputs_f state))))))
(declare-fun s0 () Register_s)
(assert (Register_is s0))
(assert (c0 s0))
(assert (c1 s0))
(assert (c2 s0))
(assert (c3 s0))
(assert (c4 s0))
(push 1)
(assert (or (b0 s0) (b1 s0)))
(check-sat)
(pop 1)
(declare-fun s1 () Register_s)
(assert (Register_t s0 s1))
(assert (c0 s1))
(assert (c1 s1))
(assert (c2 s1))
(assert (c3 s1))
(assert (c4 s1))
(push 1)
(assert (or (b0 s1) (b1 s1)))
(check-sat)
